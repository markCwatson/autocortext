This provides the .l5k program export overview of Process_Logic routine within the PLC from the HS5160 machine from Kliklok-Woodman, a Enterprise Endload Cartoner. Use this program to understand the logic so that it can be queried in the future. What will often be asked is information about why a program may not be working, so this document provides the information necessary to answer this.
(MAIN := "R00_Main",
	                       MODE := 0,
	                       DisableFlag := 0,
	                       UseAsFolder := 0)
		TAG
			ActivateVacuumOutput : BOOL (RADIX := Decimal) := 0;
			ArticleBucketTriggerDistance : REAL (RADIX := Float) := 1.00000000e+001;
			ArticleBucketTriggerPosition : REAL (RADIX := Float) := 7.30000019e+000;
			CartonPresent : BOOL (RADIX := Decimal) := 0;
			CartonWindowEndt : REAL (RADIX := Float) := 4.50000000e+000;
			CARTON_DELAY_TE : TIMER  := [969658,100,0];
			DebouncePosition1 : REAL (RADIX := Float) := 0.00000000e+000;
			DistanceToOverheadLugSol : REAL (RADIX := Float) := 2.00000000e+000;
			FeederArm_1_VacuumOutput_OFF OF aaRIOComm:10:O.1 (RADIX := Decimal);
			FeederArm_2_VacuumOutput_OFF OF aaRIOComm:10:O.3 (RADIX := Decimal);
			FeederArm_3_VacuumOutput_OFF OF aaRIOComm:10:O.5 (RADIX := Decimal);
			FeederCorrectionDistance : REAL (RADIX := Float) := 1.50000000e+000;
			FlapKickerOff2 : REAL (RADIX := Float) := 7.00000000e+000;
			FlapKickerOn2 : REAL (RADIX := Float) := 1.50000000e+000;
			HMI_ForceOFF4 : DINT (RADIX := Decimal) := 0;
			idc_test : BOOL (RADIX := Decimal) := 0;
			InfeedState : DINT (RADIX := Decimal) := 0;
			LoadAbortActuateWindow : TIMER  := [276730,50,0];
			MARCommand : MOTION_INSTRUCTION  := [335544320,3,2,0,0,0,0,0,0];
			ModPusherChainPosition : REAL (RADIX := Float) := 2.01917410e+000;
			OverheadLugFireCounter : COUNTER  := [0,5,0];
			OverheadLugFireOffPos : REAL (RADIX := Float) := 2.00000000e+000;
			OverheadlugFireOffset : REAL (RADIX := Float) := 0.00000000e+000;
			OverheadLugFireOnPos : REAL (RADIX := Float) := 0.00000000e+000;
			OverheadLugNumber : DINT (RADIX := Decimal) := 24;
			ProductShiftBSL : CONTROL  := [0,32,0];
			PusherChainPositionMOD : REAL (RADIX := Float) := 5.58689117e-001;
			PusherChainRegPositionMod : REAL (RADIX := Float) := 0.00000000e+000;
			RegistrationSensorDebounce : BOOL (RADIX := Decimal) := 0;
			ShiftRegisterOneShot : BOOL (RADIX := Decimal) := 0;
			ShiftRegisterOneShot2 : BOOL (RADIX := Decimal) := 0;
			State_Lug : DINT (RADIX := Decimal) := 0;
			State_TurnLug : DINT (RADIX := Decimal) := 0;
			StopShiftBSL : CONTROL  := [0,32,0];
			testbit : DINT (RADIX := Decimal) := 6;
			TripleMachinePitch : REAL (RADIX := Float) := 0.00000000e+000;
			TurnSectionLugFireOffPos : REAL (RADIX := Float) := 2.00000000e+000;
			TurnSectionLugFireOnPos : REAL (RADIX := Float) := 0.00000000e+000;
			TurnSectionOffsetLugNumber : DINT (RADIX := Decimal) := 0;
			VacuumOffPosition2_Arm1 : REAL (RADIX := Float) := 1.88215637e+000;
			VacuumOffPosition2_Arm2 : REAL (RADIX := Float) := 1.38821697e+001;
			VacuumOffPosition2_Arm3 : REAL (RADIX := Float) := 2.58816376e+001;
			VacuumOneShot : BOOL (RADIX := Decimal) := 0;
			VacuumOutputDisableTimer : TIMER  := [271110,75,0];
			VacuumOutputDisableTimer2 : TIMER  := [274470,75,0];
			VacuumOutputDisableTimer3 : TIMER  := [257670,75,0];
			VacuumOutputDisableTimer4 : TIMER  := [272106,150,0];
			VacuumOutputDisableTimer5 : TIMER  := [275466,150,0];
			VacuumOutputDisableTimer6 : TIMER  := [258666,150,0];
			VirtualMODForStop : REAL (RADIX := Float) := 3.06298828e+000;
		END_TAG

		ROUTINE R00_Main 
				N: JSR(R01_HighSpeedOutputs,0);
				N: JSR(R02_Shift_Registers,0);
				N: JSR(R08_Vacuum,0);
		END_ROUTINE

		ROUTINE R01_HighSpeedOutputs 
				RC: "This section controls the glue outputs.";
				N: XIC(GlueOutputs.0)XIO(PML_State.Sts_Aborted)OTE(LoadSideGlueGun);
				N: XIC(GlueOutputs.1)XIO(PML_State.Sts_Aborted)OTE(NonLoadSideGlueGun);
				N: [XIC(LoadSideGlueGun) XIO(PrevOutput10_6) OTL(PrevOutput10_6) ,XIO(LoadSideGlueGun) XIC(PrevOutput10_6) OTU(PrevOutput10_6) ,XIC(NonLoadSideGlueGun) XIO(PrevOutput10_7) OTL(PrevOutput10_7) ,XIO(NonLoadSideGlueGun) XIC(PrevOutput10_7) OTU(PrevOutput10_7) ]IOT(aaRIOComm:O);
				RC: "This rung switches the Load / Abort soleniod to the $QLoad$Q position";
				N: XIC(CartonPresentAbortGate)XIC(ProductPresentAbortGate)XIO(OverHeightProdiuctPresentAbortGate)XIO(NeedToRetractInserter)LIM(LoadAbortActuateWindowStart,MTR_PusherChain.ActualPosition,LoadAbortActuateWindowEnd)[OTL(LoadAbortSolenoid) ,RES(OverHeightCounter) ];
				RC: "This rung switches the Load / Abort solenoid to the $QAbort$Q position";
				N: [XIC(OverHeightProdiuctPresentAbortGate) ,XIC(CartonPresentAbortGate) XIO(ProductPresentAbortGate) ,XIO(CartonPresentAbortGate) XIC(ProductPresentAbortGate) ,XIC(NeedToRetractInserter) ]TON(LoadAbortActuateWindow,?,?)XIC(LoadAbortActuateWindow.DN)LIM(LoadAbortActuateWindowStart,MTR_PusherChain.ActualPosition,LoadAbortActuateWindowEnd)[OTU(LoadAbortSolenoid) ,OTL(AbortConveyorActivate) ];
				RC: "This rung switches the Load / Abort soleniod to the $QLoad$Q position";
				N: [XIC(OverHeightShiftRegister[0].4) ,XIC(NeedToRetractInserter) ]LIM(OverheadConfinerWindowStart,MTR_OverheadConfiner.ActualPosition,OverheadConfinerWindowEnd)OTL(OverheadConfinerAbort);
				RC: "This rung switches the Load / Abort solenoid to the $QAbort$Q position";
				N: XIC(CartonShiftRegister[0].0)XIC(ProductShiftRegister[0].4)XIO(OverHeightShiftRegister[0].4)XIO(NeedToRetractInserter)LIM(OverheadConfinerWindowStart,MTR_OverheadConfiner.ActualPosition,OverheadConfinerWindowEnd)OTU(OverheadConfinerAbort);
				RC: "This rung controls the Flap Kicker Solenoid output.";
				N: XIC(HMI_FlapKickerEnabled)XIC(HMI_PneumaticFlapKicker)[EQU(MachinePitch,12) [XIC(CartonInchShiftRegister[0].15) ,XIC(CartonInchShiftRegister[0].16) ,XIC(CartonInchShiftRegister[0].17) ,XIC(CartonInchShiftRegister[0].18) ,XIC(CartonInchShiftRegister[0].19) ,XIC(CartonInchShiftRegister[0].20) ,XIC(CartonInchShiftRegister[0].21) ,XIC(CartonInchShiftRegister[0].22) ,XIC(CartonInchShiftRegister[0].23) ,XIC(CartonInchShiftRegister[0].24) ,XIC(CartonInchShiftRegister[0].25) ,XIC(CartonInchShiftRegister[0].26) ] ,EQU(MachinePitch,9) [XIC(CartonInchShiftRegister[0].2) ,XIC(CartonInchShiftRegister[0].3) ,XIC(CartonInchShiftRegister[0].4) ,XIC(CartonInchShiftRegister[0].5) ,XIC(CartonInchShiftRegister[0].6) ,XIC(CartonInchShiftRegister[0].7) ,XIC(CartonInchShiftRegister[0].8) ] ]ADD(CurrentRecipe.FlapKickerOn,1,FlapKickerOn2)MOD(FlapKickerOn2,MachinePitch,FlapKickerOn2)LIM(CurrentRecipe.FlapKickerOn,MTR_PusherChain.ActualPosition,FlapKickerOn2)OTL(FlapKickerSolonoid);
				RC: "This rung controls the Flap Kicker Solenoid output.";
				N: XIC(HMI_FlapKickerEnabled)ADD(CurrentRecipe.FlapKickerOff,1,FlapKickerOff2)MOD(FlapKickerOff2,MachinePitch,FlapKickerOff2)LIM(CurrentRecipe.FlapKickerOff,MTR_PusherChain.ActualPosition,FlapKickerOff2)OTU(FlapKickerSolonoid);
				N: [EQU(MachinePitch,9) [XIC(CartonInchShiftRegister[0].9) ,XIC(CartonInchShiftRegister[0].10) ,XIC(CartonInchShiftRegister[0].11) ,XIC(CartonInchShiftRegister[0].12) ,XIC(CartonInchShiftRegister[0].13) ,XIC(CartonInchShiftRegister[0].14) ,XIC(CartonInchShiftRegister[0].15) ,XIC(CartonInchShiftRegister[0].16) ,XIC(CartonInchShiftRegister[0].17) ] ,EQU(MachinePitch,12) [XIC(CartonInchShiftRegister[0].4) ,XIC(CartonInchShiftRegister[0].5) ,XIC(CartonInchShiftRegister[0].6) ,XIC(CartonInchShiftRegister[0].7) ,XIC(CartonInchShiftRegister[0].8) ,XIC(CartonInchShiftRegister[0].9) ,XIC(CartonInchShiftRegister[0].10) ,XIC(CartonInchShiftRegister[0].11) ,XIC(CartonInchShiftRegister[0].12) ,XIC(CartonInchShiftRegister[0].13) ,XIC(CartonInchShiftRegister[0].14) ] ]OTE(CartonPresentAbortGate);
				N: [EQU(MachinePitch,9) [XIC(ProductInchShiftRegister[1].17) ,XIC(ProductInchShiftRegister[1].18) ,XIC(ProductInchShiftRegister[1].19) ,XIC(ProductInchShiftRegister[1].20) ,XIC(ProductInchShiftRegister[1].21) ,XIC(ProductInchShiftRegister[1].22) ,XIC(ProductInchShiftRegister[1].23) ,XIC(ProductInchShiftRegister[1].24) ,XIC(ProductInchShiftRegister[1].25) ] ,EQU(MachinePitch,12) [XIC(ProductInchShiftRegister[1].10) ,XIC(ProductInchShiftRegister[1].11) ,XIC(ProductInchShiftRegister[1].12) ,XIC(ProductInchShiftRegister[1].13) ,XIC(ProductInchShiftRegister[1].14) ,XIC(ProductInchShiftRegister[1].15) ,XIC(ProductInchShiftRegister[1].16) ,XIC(ProductInchShiftRegister[1].17) ,XIC(ProductInchShiftRegister[1].18) ,XIC(ProductInchShiftRegister[1].19) ,XIC(ProductInchShiftRegister[1].20) ] ]OTE(ProductPresentAbortGate);
				N: [EQU(MachinePitch,9) [XIC(OverHeightInchShiftRegister[1].14) ,XIC(OverHeightInchShiftRegister[1].15) ,XIC(OverHeightInchShiftRegister[1].16) ,XIC(OverHeightInchShiftRegister[1].17) ,XIC(OverHeightInchShiftRegister[1].18) ,XIC(OverHeightInchShiftRegister[1].19) ,XIC(OverHeightInchShiftRegister[1].20) ,XIC(OverHeightInchShiftRegister[1].21) ,XIC(OverHeightInchShiftRegister[1].22) ] ,EQU(MachinePitch,12) [XIC(OverHeightInchShiftRegister[1].10) ,XIC(OverHeightInchShiftRegister[1].11) ,XIC(OverHeightInchShiftRegister[1].12) ,XIC(OverHeightInchShiftRegister[1].13) ,XIC(OverHeightInchShiftRegister[1].14) ,XIC(OverHeightInchShiftRegister[1].15) ,XIC(OverHeightInchShiftRegister[1].16) ,XIC(OverHeightInchShiftRegister[1].17) ,XIC(OverHeightInchShiftRegister[1].18) ] ]OTE(OverHeightProdiuctPresentAbortGate);
				N: XIC(HMI_FlapKickerEnabled)LIM(CurrentRecipe.FlapKickerOn,MTR_RetardChain.ActualPosition,CurrentRecipe.FlapKickerOff)[XIC(CartonInchShiftRegister[0].14) ,XIC(CartonInchShiftRegister[0].15) ,XIC(CartonInchShiftRegister[0].16) ,XIC(CartonInchShiftRegister[0].17) ,XIC(CartonInchShiftRegister[0].18) ,XIC(CartonInchShiftRegister[0].19) ,XIC(CartonInchShiftRegister[0].20) ,XIC(CartonInchShiftRegister[0].21) ,XIC(CartonInchShiftRegister[0].22) ]XIO(PML_State.Sts_Aborted)XIO(PML_State.Sts_Stopped)[OTL(FlapKickerExtend) ,OTU(FlapKickerRetract) ];
				N: LIM(CurrentRecipe.FlapKickerOff,MTR_RetardChain.ActualPosition,CurrentRecipe.FlapKickerOn)XIO(PML_State.Sts_Aborted)XIO(PML_State.Sts_Stopped)[OTL(FlapKickerRetract) ,OTU(FlapKickerExtend) ];
				N: [XIC(PML_State.Sts_Aborted) ,XIC(PML_State.Sts_Stopped) ]OTU(FlapKickerRetract)OTU(FlapKickerExtend);
				N: XIO(PML_State.Sts_Aborted)XIO(FlapKickerEnable)TON(FlapKickerEnableDelayTimer,?,?)XIC(FlapKickerEnableDelayTimer.DN)OTL(FlapKickerEnable);
				N: [XIC(FlapKickerEnable) XIC(FlapKickerError) TON(FlapKickerEnableDelayTimer2,?,?) XIC(FlapKickerEnableDelayTimer2.DN) ,XIC(PML_State.Sts_Aborted) ]OTU(FlapKickerEnable);
		END_ROUTINE

		ROUTINE R02_Shift_Registers 
				N: XIC(HMI_TeachProductSensorLocation)[[XIC(CurrentRecipe.DisplayUnitsInch) MOV(MTR_RetardChain.ActualPosition,ProductDetectWindowStartHMI) ,XIO(CurrentRecipe.DisplayUnitsInch) MUL(MTR_RetardChain.ActualPosition,25.4,ProductDetectWindowStartHMI) ] ,CPT(ProductDetectWindowEnd,MTR_RetardChain.ActualPosition+3) MOD(ProductDetectWindowEnd,MachinePitch,ProductDetectWindowEnd) ]OTU(HMI_TeachProductSensorLocation);
				N: XIC(HMI_TeachCartonSensorLocation)[[XIC(CurrentRecipe.DisplayUnitsInch) MOV(MTR_RetardChain.ActualPosition,CartonDetectWindowStartHMI) ,XIO(CurrentRecipe.DisplayUnitsInch) MUL(MTR_RetardChain.ActualPosition,25.4,CartonDetectWindowStartHMI) ] ,CPT(CartonDetectWindowEnd,MTR_RetardChain.ActualPosition+(CurrentRecipe.CartonLength-2)) MOD(CartonDetectWindowEnd,MachinePitch,CartonDetectWindowEnd) ]OTU(HMI_TeachCartonSensorLocation);
				RC: "This rung records the carton sensing location for the carton sensor";
				N: XIC(HMI_TeachLoadAbortLocation)[[XIC(CurrentRecipe.DisplayUnitsInch) MOV(MTR_PusherChain.ActualPosition,LoadAbortActuateWindowStartHMI) ,XIO(CurrentRecipe.DisplayUnitsInch) MUL(MTR_PusherChain.ActualPosition,25.4,LoadAbortActuateWindowStartHMI) ] ,CPT(LoadAbortActuateWindowEnd,MTR_PusherChain.ActualPosition+1) MOD(LoadAbortActuateWindowEnd,MachinePitch,LoadAbortActuateWindowEnd) ]OTU(HMI_TeachLoadAbortLocation);
				RC: "This rung records the carton sensing location for the carton sensor";
				N: XIC(HMI_TeachGlueLocation)[[XIC(CurrentRecipe.DisplayUnitsInch) MOV(MTR_RetardChain.ActualPosition,GlueSensorWindowStartHMI) ,XIO(CurrentRecipe.DisplayUnitsInch) MUL(MTR_RetardChain.ActualPosition,25.4,GlueSensorWindowStartHMI) ] ,CPT(GlueSensorWindowEnd,MTR_RetardChain.ActualPosition+GlueGunOffset) MOD(GlueSensorWindowEnd,MachinePitch,GlueSensorWindowEnd) ]OTU(HMI_TeachGlueLocation);
				RC: "This rung records the carton sensing location for the carton sensor";
				N: XIC(HMI_TeachOverheadConfinerLocation)[[XIC(CurrentRecipe.DisplayUnitsInch) MOV(MTR_OverheadConfiner.ActualPosition,OverheadConfinerWindowStartHMI) ,XIO(CurrentRecipe.DisplayUnitsInch) MUL(MTR_OverheadConfiner.ActualPosition,25.4,OverheadConfinerWindowStartHMI) ] ,CPT(OverheadConfinerWindowEnd,MTR_OverheadConfiner.ActualPosition+1) MOD(OverheadConfinerWindowEnd,MachinePitch,OverheadConfinerWindowEnd) ]OTU(HMI_TeachOverheadConfinerLocation);
				RC: "This rung records the carton sensing location for the carton sensor";
				N: XIC(HMI_TeachCartonSensorFaultLocation)[XIC(CurrentRecipe.DisplayUnitsInch) MOV(MTR_PusherChain.ActualPosition,CartonFeedingFaultWindowStartHMI) ,XIO(CurrentRecipe.DisplayUnitsInch) MUL(MTR_PusherChain.ActualPosition,25.4,CartonFeedingFaultWindowStartHMI) ]OTU(HMI_TeachCartonSensorFaultLocation);
				N: XIC(CurrentRecipe.DoubleStackProduct)XIO(ProductSensor)XIC(ProductSensor2)TON(DoubleStackWarningTimer,?,?);
				RC: "This rung sets the Product Detect tag and / or the Overheight Detect tag  if a product is seen inside of the position window.";
				N: [XIC(MachineRunning) ,XIC(ManualModeAllAxes) ]LIM(ProductDetectWindowStart,MTR_RetardChain.ActualPosition,ProductDetectWindowEnd)[[XIO(ProductSensor) [XIO(CurrentRecipe.DoubleStackProduct) ,XIC(CurrentRecipe.DoubleStackProduct) XIO(ProductSensor2) ] ,XIC(PML_State.Sts_Execute) XIC(JogBtn) ,XIC(ManualCartonVacuum) ] OTL(ProductDetected) ,XIC(HMI_OverheightDetectEnabled) [[XIO(ThruBeamSensor) XIO(OverheightSensor) ,XIC(ThruBeamSensor) XIC(OverheightSensor) ,XIC(DoubleStackWarningTimer.DN) ] XIO(OverHeightGroupReject) ,XIC(OverheightProductGroupAbortEnable) XIC(OverHeightGroupReject) OTL(OverHeightGroupRejectReset) ] OTL(OverHeightDetected) ]ONS(CartonCounterOneShot)ADD(Stats.CartonsIn,1,Stats.CartonsIn)ADD(TotalCartonsProcessed,1,TotalCartonsProcessed);
				RC: "This rung sets the Carton Detect tag  if a product is seen inside of the position window.";
				N: EQU(CartonDetectState,0)LIM(CartonDetectWindowStart,MTR_RetardChain.ActualPosition,CartonDetectWindowEnd)XIC(CartonSensor)[XIC(CartonSensor2) ,XIO(HMI_DualCartonSensorsPresent) ]OTL(CartonDetected)MOV(10,CartonDetectState);
				RC: "This rung sets the Carton Detect tag  if a product is seen inside of the position window.";
				N: EQU(CartonDetectState,10)[LIM(CartonDetectWindowStart,MTR_RetardChain.ActualPosition,CartonDetectWindowEnd) [XIO(CartonSensor) ,XIC(HMI_DualCartonSensorsPresent) XIO(CartonSensor2) ] OTU(CartonDetected) ,LIM(CartonDetectWindowEnd,MTR_RetardChain.ActualPosition,CartonDetectWindowStart) XIO(CartonSensor) [XIO(CartonSensor2) ,XIO(HMI_DualCartonSensorsPresent) ] MOV(0,CartonDetectState) ];
				RC: "This rung controls the bit shift instructions";
				N: LIM(ProductDetectWindowEnd,MTR_RetardChain.ActualPosition,ProductDetectWindowStart)ONS(ShiftRegisterOneShot)[BSL(ProductShiftRegister[0],ProductShiftBSL,ProductDetected,?) XIC(ProductDetected) OTL(ProductInchDetected) OTU(ProductDetected) ,BSL(OverHeightShiftRegister[0],OverHeightShiftBSL,OverHeightDetected,?) XIC(OverHeightDetected) [XIO(OverheightProductGroupAbortEnable) CTU(OverHeightCounter,?,?) ,XIC(OverheightProductGroupAbortEnable) [XIO(OverHeightGroupReject) OTL(OverHeightGroupReject) OTL(OverHeightShiftRegister[0].1) OTL(OverHeightInchShiftRegister[0].11) CTU(OverHeightCounter,?,?) ,XIC(OverHeightGroupReject) XIC(OverHeightGroupRejectReset) OTU(OverHeightGroupReject) OTU(OverHeightGroupRejectReset) ] ] OTU(OverHeightDetected) OTL(OverHeightInchDetected) ];
				RC: "This rung controls the bit shift instructions";
				N: MOD(MTR_RetardChain.ActualPosition,1,RetardChainPositionMOD)LIM(0,RetardChainPositionMOD,0.5)ONS(ShiftRegisterOneShot4)[BSL(ProductInchShiftRegister[0],ProductInchShiftBSL,ProductInchDetected,?) OTU(ProductInchDetected) ,BSL(OverHeightInchShiftRegister[0],OverHeighInchtShiftBSL,OverHeightInchDetected,?) OTU(OverHeightInchDetected) ,BSL(CartonInchShiftRegister[0],CartonInchtShiftBSL,CartonInchDetected,?) OTU(CartonInchDetected) ];
				N: LIM(ProductDetectWindowEnd,MTR_RetardChain.ActualPosition,ProductDetectWindowStart)ONS(CartonShiftRegisterOneShot)BSL(CartonShiftRegister[0],CartonShiftBSL,CartonDetected,?)XIC(CartonDetected)OTU(CartonDetected);
				N: XIC(CartonDetected)LIM(CartonDetectWindowEnd,MTR_RetardChain.ActualPosition,CartonDetectWindowStart)ONS(CartonShiftRegisterOneShot2)OTL(CartonInchDetected);
		END_ROUTINE

		ROUTINE R08_Vacuum 
				N: CPT(FeederPosition_Degrees,360*MTR_Feeder.ActualPosition/(3*MachinePitch))LIM(0,FeederPositionMod,1)ONS(OnPositionCalcOneshot)CPT(VacuumOnPosition,3*MachinePitch*(CurrentRecipe.FeederVacuumOnPos/360))MUL(VacActuationTime_ON,MTR_Feeder.AverageVelocity,VacuumOnPositionAdjustment)SUB(VacuumOnPosition,VacuumOnPositionAdjustment,VacuumOnPosition)MOD(VacuumOnPosition,MachinePitch,VacuumOnPosition)ADD(VacuumOnPosition,2,VacuumONPosition2)MOD(VacuumONPosition2,MachinePitch,VacuumONPosition2);
				N: LIM(0,FeederPositionMod,1)ONS(OffPositionCalcOneshot)CPT(VacuumOffPosition,3*MachinePitch*(CurrentRecipe.FeederVacuumOffPos/360))MUL(VacActuationTime_OFF,MTR_Feeder.AverageVelocity,VacuumOffPositionAdjustment)SUB(VacuumOffPosition,VacuumOffPositionAdjustment,VacuumOffPosition)[LIM(MachinePitch,VacuumOffPosition,MachinePitchX2) SUB(VacuumOffPosition,MachinePitch,VacuumOffPosition) ,LIM(MachinePitchX2,VacuumOffPosition,MachinePitchX3) SUB(VacuumOffPosition,MachinePitchX2,VacuumOffPosition) ,LES(VacuumOffPosition,0) ADD(MachinePitch,VacuumOffPosition,VacuumOffPosition) ];
				N: DIV(MachinePitch,2,HalfMachinePitch)[LEQ(VacuumOffPosition,HalfMachinePitch) MOV(VacuumOffPosition,VacuumOffPosition_Arm1) ADD(VacuumOffPosition,MachinePitch,VacuumOffPosition_Arm2) ADD(VacuumOffPosition,MachinePitchX2,VacuumOffPosition_Arm3) ,GRT(VacuumOffPosition,HalfMachinePitch) ADD(MachinePitchX2,VacuumOffPosition,VacuumOffPosition_Arm1) MOV(VacuumOffPosition,VacuumOffPosition_Arm2) ADD(MachinePitch,VacuumOffPosition,VacuumOffPosition_Arm3) ];
				N: [EQU(MachinePitch,9) XIC(ProductInchShiftRegister[0].3) XIO(OverHeightInchShiftRegister[0].3) ,EQU(MachinePitch,12) XIC(ProductInchShiftRegister[0].0) XIO(OverHeightInchShiftRegister[0].0) ]XIO(RunIntoAbort)ONS(VacuumEnableOneShot)OTL(EnableVacuum);
				N: XIC(EnableVacuum)LIM(VacuumOnPosition,FeederPositionMod,VacuumONPosition2)ONS(VacuumOneShot)OTU(EnableVacuum)OTL(ActivateVacuumOutput);
				N: [SUB(MachinePitch,1,Stage1Vacuum) ,ADD(Stage1Vacuum,MachinePitch,Stage2Vacuum) ,ADD(Stage2Vacuum,MachinePitch,Stage3Vacuum) ];
				N: XIC(ActivateVacuumOutput)[LIM(Stage1Vacuum,MTR_Feeder.ActualPosition,Stage2Vacuum) XIO(HMI_ForceOFF9.0) OTL(FeederArm_1_VacuumOutput_ON) OTL(VacuumArm_1_Active) ,LIM(Stage2Vacuum,MTR_Feeder.ActualPosition,Stage3Vacuum) XIO(HMI_ForceOFF9.2) OTL(FeederArm_2_VacuumOutput_ON) OTL(VacuumArm_2_Active) ,LIM(Stage3Vacuum,MTR_Feeder.ActualPosition,Stage1Vacuum) XIO(HMI_ForceOFF9.4) OTL(FeederArm_3_VacuumOutput_ON) OTL(VacuumArm_3_Active) ]OTU(ActivateVacuumOutput);
				N: XIC(VacuumArm_1_Active)ADD(VacuumOffPosition_Arm1,2,VacuumOffPosition2_Arm1)MOD(VacuumOffPosition2_Arm1,MachinePitchX3,VacuumOffPosition2_Arm1)LIM(VacuumOffPosition_Arm1,MTR_Feeder.ActualPosition,VacuumOffPosition2_Arm1)XIO(HMI_ForceOFF9.1)OTL(FeederArm_1_VacuumOutput_OFF)OTU(VacuumArm_1_Active);
				N: XIC(VacuumArm_2_Active)ADD(VacuumOffPosition_Arm2,2,VacuumOffPosition2_Arm2)MOD(VacuumOffPosition2_Arm2,MachinePitchX3,VacuumOffPosition2_Arm2)LIM(VacuumOffPosition_Arm2,MTR_Feeder.ActualPosition,VacuumOffPosition2_Arm2)XIO(HMI_ForceOFF9.3)OTL(FeederArm_2_VacuumOutput_OFF)OTU(VacuumArm_2_Active);
				N: XIC(VacuumArm_3_Active)ADD(VacuumOffPosition_Arm3,2,VacuumOffPosition2_Arm3)MOD(VacuumOffPosition2_Arm3,MachinePitchX3,VacuumOffPosition2_Arm3)LIM(VacuumOffPosition_Arm3,MTR_Feeder.ActualPosition,VacuumOffPosition2_Arm3)XIO(HMI_ForceOFF9.5)OTL(FeederArm_3_VacuumOutput_OFF)OTU(VacuumArm_3_Active);
				N: [XIC(FeederArm_1_VacuumOutput_ON) XIO(HMI_ForceON9.0) TON(VacuumOutputDisableTimer,?,?) XIC(VacuumOutputDisableTimer.DN) OTU(FeederArm_1_VacuumOutput_ON) ,XIC(FeederArm_2_VacuumOutput_ON) XIO(HMI_ForceON9.2) TON(VacuumOutputDisableTimer2,?,?) XIC(VacuumOutputDisableTimer2.DN) OTU(FeederArm_2_VacuumOutput_ON) ,XIC(FeederArm_3_VacuumOutput_ON) XIO(HMI_ForceON9.4) TON(VacuumOutputDisableTimer3,?,?) XIC(VacuumOutputDisableTimer3.DN) OTU(FeederArm_3_VacuumOutput_ON) ];
				N: [XIC(FeederArm_1_VacuumOutput_OFF) XIO(HMI_ForceON9.1) TON(VacuumOutputDisableTimer4,?,?) XIC(VacuumOutputDisableTimer4.DN) OTU(FeederArm_1_VacuumOutput_OFF) ,XIC(FeederArm_2_VacuumOutput_OFF) XIO(HMI_ForceON9.3) TON(VacuumOutputDisableTimer5,?,?) XIC(VacuumOutputDisableTimer5.DN) OTU(FeederArm_2_VacuumOutput_OFF) ,XIC(FeederArm_3_VacuumOutput_OFF) XIO(HMI_ForceON9.5) TON(VacuumOutputDisableTimer6,?,?) XIC(VacuumOutputDisableTimer6.DN) OTU(FeederArm_3_VacuumOutput_OFF) ];
				N: [XIC(HMI_ForceON9.0) XIO(HMI_ForceOFF4.3) OTL(FeederArm_1_VacuumOutput_ON) ,XIC(HMI_ForceON9.1) XIO(HMI_ForceOFF4.4) OTL(FeederArm_1_VacuumOutput_OFF) ,XIC(HMI_ForceON9.2) XIO(HMI_ForceOFF4.5) OTL(FeederArm_2_VacuumOutput_ON) ,XIC(HMI_ForceON9.3) XIO(HMI_ForceOFF4.6) OTL(FeederArm_2_VacuumOutput_OFF) ,XIC(HMI_ForceON9.4) XIO(HMI_ForceOFF4.7) OTL(FeederArm_3_VacuumOutput_ON) ,XIC(HMI_ForceON9.5) XIO(HMI_ForceOFF4.8) OTL(FeederArm_3_VacuumOutput_OFF) ];
				N: MUL(MachinePitch,2,MachinePitchX2)MUL(MachinePitch,3,MachinePitchX3)[LES(MTR_Feeder.ActualPosition,MachinePitch) CPT(FeederPositionDegrees_HMI,MTR_Feeder.ActualPosition/MachinePitch*120) ,LIM(MachinePitch,MTR_Feeder.ActualPosition,MachinePitchX2) CPT(FeederPositionDegrees_HMI,(MTR_Feeder.ActualPosition-MachinePitch)/MachinePitch*120) ,LIM(MachinePitchX2,MTR_Feeder.ActualPosition,MachinePitchX3) CPT(FeederPositionDegrees_HMI,(MTR_Feeder.ActualPosition-MachinePitchX2)/MachinePitch*120) ];
				N: MUL(MachinePitch,2,MachinePitchX2)MUL(MachinePitch,3,MachinePitchX3)[LES(MTR_Feeder.ActualPosition,MachinePitch) CPT(FeederPositionMod,MTR_Feeder.ActualPosition) ,LIM(MachinePitch,MTR_Feeder.ActualPosition,MachinePitchX2) CPT(FeederPositionMod,MTR_Feeder.ActualPosition-MachinePitch) ,LIM(MachinePitchX2,MTR_Feeder.ActualPosition,MachinePitchX3) CPT(FeederPositionMod,MTR_Feeder.ActualPosition-MachinePitchX2) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS